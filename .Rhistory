# Apply median filter
train_sf[, "dmed"] <- median_filter(
train_sf$lon,
train_sf$lat,
w = windows_size
)
#Distribution & statistics
summary(train_sf$xmed)
range <- range(train_sf$xmed)
#Distribution & statistics
summary(train_sf$dmed)
#Distribution & statistics
summary(train_sf$dmed)
range <- range(train_sf$dmed)
train_sf
# Apply median filter
train_sf[, "dmed"] <- median_filter(
train_sf$lon,
train_sf$lat,
w = windows_size
)
train_sf
# Apply median filter
train_sf[, "dmed"] <- median_filter(
train_sf$X,
train_sf$Y,
w = windows_size
)
train_sf
#Distribution & statistics
summary(train_sf$dmed)
range <- range(train_sf$dmed)
nrow(train_sf)
##full histogram
hist(train_sf$xmed, breaks=50, xlab ="dmed", main ="Distribution of xmed", xlim= range(train_sf$xmed))
##full histogram
hist(train_sf$dmed, breaks=50, xlab ="dmed", main ="Distribution of dmed", xlim= range(train_sf$dmed))
##truncated histogram
hist(train_sf$dmed, breaks=50, xlab ="dmed", main ="Distribution of dmed (max freq=150)", xlim= range(train_sf$dmed), ylim=c(0,150))
View(filtered_datasets)
View(filtered_datasets[YL_2])
View(filtered_datasets$AB_1)
# Find a threshold for each track. Using percentile. !!Arbitrary 95e pct!!
clean_track <- list()
th_list <- list()
for (i in seq_along(unique_tracks)) {
lab_id <- unique_tracks[i]
# Compute threshold
c_track <- train_clean[train_clean$id_trace == lab_id, ]
q95 <- quantile(c_track$dmed, probs = c(.95))
# Store data
clean_track[[lab_id]] <- c_track[c_track$dmed < q95, ]
th_list[[lab_id]] <- q95
}
for (i in seq_along(unique_tracks)) {
lab_id <- unique_tracks[i]
# Compute threshold
c_track <- train_sf[train_sf$id_trace == lab_id, ]
q95 <- quantile(c_track$dmed, probs = c(.95))
# Store data
clean_track[[lab_id]] <- c_track[c_track$dmed < q95, ]
th_list[[lab_id]] <- q95
}
lab_id
View(lab_id)
c_track
q95
th_list
clean_track
View(clean_track)
View(c_track)
unique(train_sf$dmed)
sort(unique(train_sf$dmed))
lines(density(train_sf$med), col = "blue", lwd = 2)
dens <- density(train_sf$med)
dens <- density(as.numeric(train_sf$med)
dens <- density(as.numeric(train_sf$med))
dens <- density(as.numeric(train_sf$med))
densite <- density(donnees$dmed))
densite <- density(train_sf$dmed))
densite <- density(train_sf$dmed)
lines(densite)
##truncated histogram
hist(train_sf$dmed, breaks=50, xlab ="dmed", main ="Distribution of dmed (max freq=150)", xlim= range(train_sf$dmed), ylim=c(0,150))
dens <- density(as.numeric(train_sf$med))
lines(dens, col = "blue", lwd = 2)
densite <- density(train_sf$dmed)
lines(densite, col="blue")
##full histogram
hist(train_sf$dmed, breaks=50, xlab ="dmed", main ="Distribution of dmed", xlim= range(train_sf$dmed))
densite <- density(train_sf$dmed)
lines(densite, col="blue")
densite <- density(train_sf$dmed, bw= 0.1)
lines(densite, col="blue", lwd= 2)
lines(densite, col="blue", lwd= 10)
lines(densite, col="blue", lwd= 3)
##full histogram
hist(train_sf$dmed, breaks=50, xlab ="dmed", main ="Distribution of dmed", xlim= range(train_sf$dmed))
densite <- density(train_sf$dmed, bw= 0.1)
lines(densite, col="blue", lwd= 3)
densite <- density(train_sf$dmed, bw= 1)
lines(densite, col="blue", lwd= 3)
0.
0.
densite <- density(train_sf$dmed, bw= 0.1)
lines(densite, col="blue", lwd= 3)
densite <- density(train_sf$dmed, weights = rep(1, length(train_sf$dmed))
densite <- density(train_sf$dmed, weights = rep(1, length(train_sf$dmed)))
lines(densite, col="blue", lwd= 3)
##full histogram
hist(train_sf$dmed, breaks=50, xlab ="dmed", main ="Distribution of dmed", xlim= range(train_sf$dmed))
densite <- density(train_sf$dmed, weights = rep(1, length(train_sf$dmed)))
lines(densite, col="blue", lwd= 3)
##truncated histogram
hist(train_sf$dmed, breaks=50, xlab ="dmed", main ="Distribution of dmed (max freq=150)", xlim= range(train_sf$dmed), ylim=c(0,150))
densite <- density(train_sf$dmed, weights = rep(1, length(train_sf$dmed)))
lines(densite, col="blue", lwd= 3)
##truncated histogram
hist(train_sf$dmed, breaks=50, xlab ="dmed", main ="Distribution of dmed (max freq=150)", xlim= range(train_sf$dmed), ylim=c(0,150))
densite <- density(train_sf$dmed, weights = rep(1, length(train_sf$dmed)))
lines(densite, col="blue", lwd= 1)
##full histogram
hist(train_sf$dmed, breaks=50, xlab ="dmed", main ="Distribution of dmed", xlim= range(train_sf$dmed))
densite <- density(train_sf$dmed, weights = rep(1, length(train_sf$dmed)))
lines(densite, col="blue", lwd= 1)
##truncated histogram
hist(train_sf$dmed, breaks=50, xlab ="dmed", main ="Distribution of dmed (max freq=150)", xlim= range(train_sf$dmed), ylim=c(0,150))
densite <- density(train_sf$dmed, weights = rep(0.1, length(train_sf$dmed)))
lines(densite, col="blue", lwd= 1)
hist_data <- hist(train_sf$dmed, breaks = 50, plot = FALSE)
fit <- lm(hist_data$counts ~ hist_data$mids)
hist(train_sf$dmed, breaks = 50, xlab = "dmed", main = "Distribution of dmed (max freq=150)",
xlim = range(train_sf$dmed), ylim = c(0, 150))
curve(predict(fit, newdata = data.frame(x = x)),
add = TRUE, col = "blue", lwd = 2)
hist_data <- hist(train_sf$dmed, breaks = 50, plot = FALSE)
fit <- lm(hist_data$counts ~ hist_data$mids)
hist(train_sf$dmed, breaks = 50, xlab = "dmed", main = "Distribution of dmed (max freq=150)",
xlim = range(train_sf$dmed), ylim = c(0, 150))
curve(predict(fit, newdata = data.frame(x = x)),
add = TRUE, col = "blue", lwd = 2)
##truncated histogram
hist(train_sf$dmed, breaks=50, xlab ="dmed", main ="Distribution of dmed (max freq=150)", xlim= range(train_sf$dmed), ylim=c(0,150))
densite <- density(train_sf$dmed, weights = rep(0.1, length(train_sf$dmed)))
lines(densite, col="blue", lwd= 1)
hist(train_sf$dmed, breaks=50, xlab ="dmed", main ="Distribution of dmed (max freq=150)", xlim= range(0,40, ylim=c(0,150))
hist(train_sf$dmed, breaks=50, xlab ="dmed", main ="Distribution of dmed (max freq=150)", xlim= range(0,40), ylim=c(0,150))
hist(train_sf$dmed, breaks=50, xlab ="dmed", main ="Distribution of dmed (max freq=150)", xlim= c(0,40), ylim=c(0,150))
hist(train_sf$dmed, breaks=50, xlab ="dmed", main ="Distribution of dmed (max freq=150)", xlim= c(0,60), ylim=c(0,150))
#METHODE SEUIL FIXE
threshold <- 12
clean_track <- list() #we store only points that are inside the fixed thresholds
outliers <- list() #points considered as outliers
lapply(filtered_datasets, function(train_sf) {
ggplot(train_sf) +
geom_sf(color = "red") +
geom_point(data = train_sf, aes(x = xmed, y = ymed), color = "blue", shape=4) +
facet_wrap(~ id_trace)
})
lapply(filtered_datasets, function(train_sf) {
ggplot(train_sf) +
geom_sf(color = "red", shape=4) +
geom_point(data = train_sf, aes(x = xmed, y = ymed), color = "blue") +
facet_wrap(~ id_trace)
})
c_track
View(c_track)
seq_along(unique_tracks)
lab_id
train_sf[train_sf$id_trace == lab_id, ]
q95 <- quantile(c_track$dmed, probs = c(.95))
q95
threshold <- 12
clean_track <- list() #we store only points that are inside the fixed thresholds
outliers <- list() #points considered as outliers
for (i in seq_along(unique_tracks)) {
lab_id <- unique_tracks[i]
# Compute threshold & Store data
c_track <- train_sf[train_sf$id_trace == lab_id, ]
clean_track[[lab_id]] <- c_track[c_track$dmed < threshold, ]
outliers[[lab_id]] <- c_track[c_track$dmed > threshold, ]
}
# Merge all df
df_clean <- reshape::merge_all(clean_track)
#METHODE SEUIL FIXE
threshold <- 12
clean_track <- list() #we store only points that are inside the fixed thresholds
outliers <- list() #points considered as outliers
for (i in seq_along(unique_tracks)) {
lab_id <- unique_tracks[i]
# Compute threshold & Store data
c_track <- train_sf[train_sf$id_trace == lab_id, ]
clean_track[[lab_id]] <- c_track[c_track$dmed < threshold, ]
outliers[[lab_id]] <- c_track[c_track$dmed > threshold, ]
}
# Merge all df
df_clean <- reshape::merge_all(clean_track)
clean_track
View(clean_track)
# Merge all df
df_clean <- reshape::merge_all(clean_track)
# Merge all df
#df_clean <- reshape::merge_all(clean_track) #fonctionne pas je ne sais pas pourquoi
df_clean <- st_join(clean_track, join = st_union)
class(clean_track)
# Merge all df
#df_clean <- reshape::merge_all(clean_track) #fonctionne pas je ne sais pas pourquoi
df_clean <- st_join(clean_track[[lab_id]], join = st_union)
class(clean_track$AB_1)
df_clean <- do.call(rbind, clean_track)
class(df_clean)
df_clean
View(df_clean)
# Show how many pings have been removed
n_rem <- nrow(train_sf) - nrow(df_clean)
pct_rem <- (n_rem / nrow(df_clean)) * 100
sprintf(
"%s (%s %% of total) pings removed using 95e pct for each track",
n_rem, round(pct_rem)
)
sprintf(
"%s (%s % of total) pings removed using 95e pct for each track",
n_rem, round(pct_rem)
)
# Show how many pings have been removed
n_rem <- nrow(train_sf) - nrow(df_clean)
pct_rem <- (n_rem / nrow(df_clean)) * 100
sprintf(
"%s (%s % of total) pings removed using 95e pct for each track",
n_rem, round(pct_rem)
)
# Show how many pings have been removed
n_rem <- nrow(train_sf) - nrow(df_clean)
pct_rem <- (n_rem / nrow(df_clean)) * 100
sprintf(
"%s (%s%% of total) pings removed using 12 as threshold for each track",
n_rem, round(pct_rem)
)
# Show how many pings have been removed
n_rem <- nrow(train_sf) - nrow(df_clean)
pct_rem <- (n_rem / nrow(df_clean)) * 100
sprintf(
"%s (%s%% of total) pings removed using 12 as threshold for each track",
n_rem, round(pct_rem,2)
)
outliers
nrow(outliers)
View(outliers)
df_outliers <- do.call(rbind, outliers)
lapply(filtered_datasets, function(df_clean) {
ggplot(df_clean) +
geom_sf(color = "red", shape=4) +
geom_point(data = df_clean, aes(x = xmed, y = ymed), color = "blue") +
facet_wrap(~ id_trace)
})
lapply(filtered_datasets, function(df_clean) {
ggplot(df_clean) +
geom_sf(color = "green", shape=4) +
geom_point(data = df_clean, aes(x = xmed, y = ymed), color = "blue") +
geom_point(data = outliers, aes(x = xmed, y = ymed), color = "red", shape=4) +
facet_wrap(~ id_trace)
})
lapply(filtered_datasets, function(train_sf) {
ggplot(train_sf) +
geom_sf(color = "blue", shape=2) +
geom_point(data = df_clean, aes(x = xmed, y = ymed), color = "green", shape=3) +
geom_point(data = outliers, aes(x = xmed, y = ymed), color = "red", shape=4) +
facet_wrap(~ id_trace)
})
filtered_outliers <- list()
for (track in unique_tracks) {
filtered_df_clean[[as.character(track)]] <- subset(outlier, id_trace == track)
}
filtered_outliers <- list()
for (track in unique_tracks) {
filtered_df_clean[[as.character(track)]] <- subset(outliers, id_trace == track)
}
View(outliers)
filtered_outliers <- list()
lapply(filtered_datasets,filtered_df_clean,filtered_outliers, function(train_sf) {
ggplot(train_sf) +
geom_sf(color = "blue", shape=2) +
geom_point(data = df_clean, aes(x = xmed, y = ymed), color = "green", shape=3) +
geom_point(data = outliers, aes(x = xmed, y = ymed), color = "red", shape=4) +
facet_wrap(~ id_trace)
})
filtered_df_clean <- list()
for (track in unique_tracks) {
filtered_df_clean[[as.character(track)]] <- subset(df_clean, id_trace == track)
}
filtered_outliers <- list()
for (track in unique_tracks) {
filtered_df_clean[[as.character(track)]] <- subset(df_outliers, id_trace == track)
}
lapply(filtered_datasets,filtered_df_clean,filtered_outliers, function(train_sf) {
ggplot(train_sf) +
geom_sf(color = "blue", shape=2) +
geom_point(data = df_clean, aes(x = xmed, y = ymed), color = "green", shape=3) +
geom_point(data = outliers, aes(x = xmed, y = ymed), color = "red", shape=4) +
facet_wrap(~ id_trace)
})
library(tidyverse)
library(summarytools)
library(happign)
library(sf)
library(reshape)
library(maptiles)
library(ggspatial)
source("scripts/assets/fun.r")
# ==============================================================================
# Import data
# ==============================================================================
train_sf <- read.csv("data/in/all/traces_groupe1.csv", sep = ";") %>%
st_as_sf(coords = c("lon", "lat"), crs = 2154)
# # Loading Rennes com to filter outliers
# data("cog_2023")
# insee_code <- cog_2023[cog_2023$LIBELLE == "Rennes", "COM"]
# com <- get_apicarto_cadastre(insee_code, type = "commune")
# com <- st_transform(com, 2154)
# ==============================================================================
# Exploring data
# ==============================================================================
region <- st_read("data/elem_carto/region.shp")
bretagne <- subset(region, NOM_M == 'BRETAGNE')
#one plot with all tracks
ggplot() +
geom_sf(data = bretagne, color = "black", fill = NA) +
geom_sf(data = train_sf, color = "red")
###there are tracks in Rennes, one in Vezin-le-coquet, one in Concarneau
#one plot by track
##filter tracks
unique_tracks <- unique(train_sf$id_trace)
filtered_datasets <- list()
for (track in unique_tracks) {
filtered_datasets[[as.character(track)]] <- subset(train_sf, id_trace == track)
}
##plots
lapply(filtered_datasets, function(train_sf) {
ggplot(train_sf) +
geom_sf(color = "red") +
facet_wrap(~ id_trace)
})
# ==============================================================================
# Handle outliers
# ==============================================================================
# Outliers: Concarneau
# ------------------------------------------------------------------------------
# Get only pings in Rennes
#train_sf$inter <- st_intersects(train_sf, com, sparse = FALSE)
# Checkout
# train_sf %>%
#   filter(inter == "TRUE") %>%
#   ggplot() +
#   geom_sf()
# Filter
# train_clean <- train_sf %>%
#   mutate(
#     lon = st_coordinates(geometry)[, 1],
#     lat = st_coordinates(geometry)[, 2]
#   ) %>%
#   filter(inter == "TRUE") %>%
#   as_tibble() %>%
#   select(-c(inter, geometry))
# ------------------------------------------------------------------------------
# Outliers identification using median filter
# ------------------------------------------------------------------------------
# NOTE: w = 7 so, time window = [i-7;i+7] (i.e. 7 seconds on either side of i).
# Default value that seems reasonable. I don't see any reason to change it
# here.
windows_size <- 7 #Parameter
train_sf <- cbind(train_sf, st_coordinates(train_sf))
# Apply median filter
train_sf[, "dmed"] <- median_filter(
train_sf$X,
train_sf$Y,
w = windows_size
)
#Distribution & statistics
summary(train_sf$dmed)
range <- range(train_sf$dmed)
nrow(train_sf)
##full histogram
hist(train_sf$dmed, breaks=50, xlab ="dmed", main ="Distribution of dmed", xlim= range(train_sf$dmed))
##truncated histograms
hist(train_sf$dmed, breaks=50, xlab ="dmed", main ="Distribution of dmed (max freq=150)", xlim= range(train_sf$dmed), ylim=c(0,150))
hist(train_sf$dmed, breaks=50, xlab ="dmed", main ="Distribution of dmed (max freq=150)", xlim= c(0,60), ylim=c(0,150))
### those histograms can help choose a threshold for defining outlier.
### it seems there a break at dmed = 12
#Plots
##Change dmed into coordinates
train_sf <- train_sf %>%
mutate(xmed = X - dmed,
ymed = Y - dmed)
##update filters by tracks with medians coordinates
for (track in unique_tracks) {
filtered_datasets[[as.character(track)]] <- subset(train_sf, id_trace == track)
}
lapply(filtered_datasets, function(train_sf) {
ggplot(train_sf) +
geom_sf(color = "red", shape=4) +
geom_point(data = train_sf, aes(x = xmed, y = ymed), color = "blue") +
facet_wrap(~ id_trace)
})
# Find a threshold for each track. Using percentile. !!Arbitrary 95e pct!!
#METHODE SEUIL FIXE
threshold <- 12
clean_track <- list() #we store only points that are inside the fixed thresholds
outliers <- list() #points considered as outliers
for (i in seq_along(unique_tracks)) {
lab_id <- unique_tracks[i]
# Compute threshold & Store data
c_track <- train_sf[train_sf$id_trace == lab_id, ]
clean_track[[lab_id]] <- c_track[c_track$dmed < threshold, ]
outliers[[lab_id]] <- c_track[c_track$dmed > threshold, ]
}
# Merge
#df_clean <- reshape::merge_all(clean_track) #fonctionne pas je ne sais pas pourquoi
df_clean <- do.call(rbind, clean_track)
df_outliers <- do.call(rbind, outliers)
class(train_sf)
class(df_outliers)
#Plot - A FAIRE
train_sf2 <- st_intersection(train_sf, df_outliers)
train_sf2
#Plot - A FAIRE
train_sf2 <- st_intersects(train_sf, df_outliers)
View(train_sf2 )
View(train_sf2)
st_intersects(train_sf, df_outliers)
#Plot - A FAIRE
train_sf$is_outlier <- st_intersects(train_sf, df_outliers)
train_sf$is_outlier
View(train_sf)
#Plot - A FAIRE
train_sf$is_outlier <- apply(st_intersects(train_sf, df_outliers), 1, function(x) any(x))
unique(train_sf$is_outlier)
summary(train_sf$is_outlier)
ggplot(train_sf) +
geom_sf(color = "green4", shape=8)
ggplot(train_sf) +
geom_sf(color = "green4", shape=8) +
geom_point(data = train_sf, aes(x = xmed, y = ymed), color = "blue4", shape = 19)
ggplot(train_sf) +
geom_sf(color = "green4", shape=8) +
geom_point(data = train_sf, aes(x = xmed, y = ymed), color = "blue4", shape = 19) +
geom_point(data = train_sf[train_sf$is_outlier == TRUE,], aes(x = xmed, y = ymed), color = "red4", shape = 4)
lapply(filtered_datasets, function(train_sf) {
ggplot(train_sf) +
geom_sf(color = "green4", shape=8) +
geom_point(data = train_sf, aes(x = xmed, y = ymed), color = "blue4", shape = 19) +
geom_point(data = train_sf[train_sf$is_outlier == TRUE,], aes(x = xmed, y = ymed), color = "red4", shape = 4) +
facet_wrap(~ id_trace)
})
train_sf[train_sf$is_outlier == TRUE,]
lapply(filtered_datasets, function(train_sf) {
ggplot(train_sf) +
geom_sf(color = "green4", shape=8) +
geom_point(data = train_sf, aes(x = xmed, y = ymed), color = "blue4", shape = 19) +
geom_point(data = train_sf[train_sf$is_outlier == TRUE,], aes(x = xmed, y = ymed), color = "red4") +
facet_wrap(~ id_trace)
})
ggplot(train_sf) +
geom_sf(color = "green4", shape=8) +
geom_point(data = train_sf, aes(x = xmed, y = ymed), color = "blue4", shape = 19) +
geom_point(data = train_sf[train_sf$is_outlier == TRUE,], aes(x = xmed, y = ymed), color = "red4") +
# Show how many pings have been removed
n_rem <- nrow(train_sf) - nrow(df_clean)
ggplot(train_sf) +
geom_sf(color = "green4", shape=8) +
geom_point(data = train_sf, aes(x = xmed, y = ymed), color = "blue4", shape = 19) +
geom_point(data = train_sf[train_sf$is_outlier == TRUE,], aes(x = xmed, y = ymed), color = "red4") +
# Show how many pings have been removed
n_rem <- nrow(train_sf) - nrow(df_clean)
ggplot(train_sf) +
geom_sf(color = "green4", shape=8) +
geom_point(data = train_sf, aes(x = xmed, y = ymed), color = "blue4", shape = 19) +
geom_point(data = train_sf[train_sf$is_outlier == TRUE,], aes(x = xmed, y = ymed), color = "red4")
ggplot(train_sf) +
geom_sf(color = "green4", shape=8) +
geom_point(data = train_sf, aes(x = xmed, y = ymed), color = "blue4", shape = 19) +
geom_point(data = train_sf[train_sf$is_outlier == TRUE,], aes(x = xmed, y = ymed), color = "red4", size = 10)
lapply(filtered_datasets, function(train_sf) {
ggplot(train_sf) +
geom_sf(color = "green4", shape=8) +
geom_point(data = train_sf, aes(x = xmed, y = ymed), color = "blue4", shape = 19) +
geom_point(data = train_sf[train_sf$is_outlier == TRUE,], aes(x = xmed, y = ymed), color = "red4", size = 5) +
facet_wrap(~ id_trace)
})
# je ne sais pas pourquoi je n'arrive pas à rendre visible les outliers ici :
outlier <- train_sf[train_sf$is_outlier == TRUE,]
unique(outlier$id_trace)
lapply(filtered_datasets, function(train_sf) {
ggplot(train_sf) +
geom_sf(color = "green4", shape=8) +
geom_point(data = train_sf, aes(x = xmed, y = ymed), color = "blue4", shape = 19) +
geom_point(data = outlier, aes(x = xmed, y = ymed), color = "red4", size = 5) +
facet_wrap(~ id_trace)
})
# je ne sais pas pourquoi je n'arrive pas à rendre visible les outliers ici :
outlier <- train_sf[train_sf$is_outlier == TRUE,]
unique(outlier$id_trace)
lapply(filtered_datasets, function(train_sf) {
ggplot(train_sf) +
geom_sf(color = "green4", shape=8) +
geom_point(data = train_sf, aes(x = xmed, y = ymed), color = "blue4", shape = 19) +
if (any(train_sf$is_outlier)) {
geom_point(data = train_sf[train_sf$is_outlier, ], aes(x = xmed, y = ymed), color = "red4")
} else {
NULL
} +
facet_wrap(~ id_trace)
})
